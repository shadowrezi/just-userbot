from pyrogram import Client, filters
from pyrogram.types import Message
from pyrogram.errors import FloodWait
from re import search as re_search
from asyncio import sleep
from random import choice


# ‚ù§Ô∏è magic text=str;
@Client.on_message(filters.command(
    commands="magic", prefixes='.') & filters.me
)
async def magic(client, msg: Message):

    # –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞
    text_parsing = re_search(r'(?<=text\\=).+?(?=;)', msg.text)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–∫—Å—Ç–∞
    if text_parsing:
        text = text_parsing[0]
    # Value by default
    else:
        text = '‚ù§Ô∏è'

    # –§—Ä–µ–π–º—ã
    frame_1 = """ü§çü§çü§çü§çü§çü§çü§çü§çü§ç
ü§çü§ç‚ù§Ô∏è‚ù§Ô∏èü§ç‚ù§Ô∏è‚ù§Ô∏èü§çü§ç
ü§ç‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏èü§ç
ü§ç‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏èü§ç
ü§ç‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏èü§ç
ü§çü§ç‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏èü§çü§ç
ü§çü§çü§ç‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏èü§çü§çü§ç
ü§çü§çü§çü§ç‚ù§Ô∏èü§çü§çü§çü§ç
ü§çü§çü§çü§çü§çü§çü§çü§çü§ç"""

    frame_2 = frame_1.replace("‚ù§Ô∏è", "üß°")

    frame_3 = frame_1.replace("‚ù§Ô∏è", "üíõ")

    frame_4 = frame_1.replace("‚ù§Ô∏è", "üíö")

    frame_5 = frame_1.replace("‚ù§Ô∏è", "üíô")

    frame_6 = frame_1.replace("‚ù§Ô∏è", "üíú")

    frame_7 = frame_1.replace("‚ù§Ô∏è", "üñ§")

    frame_8 = frame_1.replace("‚ù§Ô∏è", "ü§é")

    # –ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç —Å–µ—Ä–¥–µ—Ü
    heart_assortment = ["‚ù§Ô∏è", "üß°", "üíõ", "üíö", "üíô", "üíú", "üñ§", "ü§é"]

    # –†–∞–Ω–¥–æ–º–Ω—ã–µ —Ñ—Ä–µ–π–º—ã
    frame_9 = "".join(
        list(map(lambda x: "\\n" if x == "\\n" else choice(heart_assortment) if x != "ü§ç" else "ü§ç", frame_8)))

    frame_10 = "".join(
        list(map(lambda x: "\\n" if x == "\\n" else choice(heart_assortment) if x != "ü§ç" else "ü§ç", frame_8)))

    frame_11 = "".join(
        list(map(lambda x: "\\n" if x == "\\n" else choice(heart_assortment) if x != "ü§ç" else "ü§ç", frame_8)))

    frame_12 = "".join(
        list(map(lambda x: "\\n" if x == "\\n" else choice(heart_assortment) if x != "ü§ç" else "ü§ç", frame_8)))

    frame_13 = "".join(
        list(map(lambda x: "\\n" if x == "\\n" else choice(heart_assortment) if x != "ü§ç" else "ü§ç", frame_8)))

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ñ—Ä–µ–π–º—ã –≤ —Å–ø–∏—Å–æ–∫
    frames_to_print = [frame_1, frame_2, frame_3, frame_4, frame_5, frame_6, frame_7, frame_8, frame_9, frame_10,
                       frame_11, frame_12, frame_13, frame_1]

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Å–µ —Ñ—Ä–µ–π–º—ã
    for frame in frames_to_print:

        try:
            await msg.edit(frame)
            await sleep(.4)

        except FloodWait as fw:
            await sleep(fw.value)


# ‚ù§Ô∏è mini-magic text=str;
@Client.on_message(filters.command(commands="mini-magic", prefixes='.') & filters.me)
async def mini_magic(client, msg: Message):

    # –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞
    text_parsing = re_search(r'(?<=text\\=).+?(?=;)', msg.text)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–∫—Å—Ç–∞
    if text_parsing:
        text = text_parsing[0]
    # Value by default
    else:
        text = '‚ù§Ô∏è'

    # –§—Ä–µ–π–º—ã
    frame_1 = """‚ú®üíéüíé‚ú®üíéüíé‚ú®
üíéüíéüíéüíéüíéüíéüíé
üíéüíéüíéüíéüíéüíéüíé
‚ú®üíéüíéüíéüíéüíé‚ú®
‚ú®‚ú®üíéüíéüíé‚ú®‚ú®
‚ú®‚ú®‚ú®üíé‚ú®‚ú®‚ú®
"""

    frame_2 = frame_1.replace("üíé", "üå∫")
    frame_3 = frame_1.replace("üíé", "üòò").replace("‚ú®", "‚òÅÔ∏è")
    frame_4 = frame_1.replace("üíé", "üå∏")
    frame_5 = frame_1.replace("üíé", "üê∏").replace("‚ú®", "üåæ")
    frame_6 = frame_1.replace("üíé", "üí•").replace("‚ú®", "üî´")
    frame_7 = frame_1.replace("üíé", "üíü").replace("‚ú®", "‚òÅÔ∏è")
    frame_8 = frame_1.replace("üíé", "üíñ").replace("‚ú®", "üçÄ")
    frame_9 = frame_1.replace("üíé", "üêº").replace("‚ú®", "üå¥")

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ñ—Ä–µ–π–º—ã –≤ —Å–ø–∏—Å–æ–∫
    frames = [frame_1, frame_2, frame_3, frame_4, frame_5, frame_6, frame_7, frame_8, frame_9]

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ—Ä–µ–π–º
    for frame in frames:

        try:
            await msg.edit(frame)
            await sleep(.5)

        except FloodWait as fw:
            await sleep(fw.value)

    # –û—Ç–±—Ä–∞–∂–∞–µ–º –∫–æ–Ω–µ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await msg.edit(text)
        await sleep(0.5)

    except FloodWait as fw:
        await sleep(fw.value)
